extends Node2D
class_name 人机出牌类

static func 获取牌型列表(手牌列表:Array[扑克牌类], 指定牌型:扑克牌类.牌型信息) -> Array[扑克牌类.牌型信息]:
    var 出牌信息:Array[扑克牌类.牌型信息]=[]
    var 手牌点数列表:Array[int] = []
    for 牌 in 手牌列表:
        手牌点数列表.append(扑克牌类.点数列表.find(牌.点数))
    手牌点数列表.sort()
    var 统计手牌:Dictionary = 扑克牌类.统计(手牌点数列表)
    match 指定牌型.牌型:
        扑克牌类.牌型列表.单张:
            for i in 统计手牌.keys():
                if 统计手牌[i] >= 1:
                    出牌信息.append(扑克牌类.牌型信息.new(指定牌型.牌型,扑克牌类.点数列表[i]))
        扑克牌类.牌型列表.对子:
            for i in 统计手牌.keys():
                if 统计手牌[i] >= 2:
                    出牌信息.append(扑克牌类.牌型信息.new(指定牌型.牌型,扑克牌类.点数列表[i]))
        扑克牌类.牌型列表.三张:
            for i in 统计手牌.keys():
                if 统计手牌[i] >= 3:
                    出牌信息.append(扑克牌类.牌型信息.new(指定牌型.牌型,扑克牌类.点数列表[i]))
        扑克牌类.牌型列表.炸弹:
            for i in 统计手牌.keys():
                if 统计手牌[i] == 4:
                    出牌信息.append(扑克牌类.牌型信息.new(指定牌型.牌型,扑克牌类.点数列表[i]))
        扑克牌类.牌型列表.顺子:
            var 顺子大小:int=扑克牌类.点数列表.find(指定牌型.尾点数)-扑克牌类.点数列表.find(指定牌型.头点数)+1
            var 统计键列表:Array=统计手牌.keys()
            统计键列表.sort()
            for i in range(统计键列表.size()):
                if i + 顺子大小  > 手牌点数列表.size():
                    break
                if 扑克牌类.是顺子(统计键列表.slice(i,i+顺子大小)):
                    出牌信息.append(扑克牌类.牌型信息.new(指定牌型.牌型,扑克牌类.点数列表[统计键列表[i]],扑克牌类.点数列表[统计键列表[i+顺子大小-1]]))
    #打印出牌信息
    # var 出牌信息打印:String="出牌信息列表:"
    # for i in 出牌信息:
    #     出牌信息打印+=i.牌型+" 头"+i.头点数+" 尾"+i.尾点数
    # print(出牌信息打印)
    return 出牌信息

static func 根据牌型出牌(手牌列表:Array[Node],输入牌型:扑克牌类.牌型信息)->Array[Node]:
    var 出牌列表:Array[Node]=[]
    var 重复牌牌型:Array[String]=["单张","对子","三张","炸弹"]
    var i:int=0
    if 输入牌型.牌型 in 重复牌牌型:
        for 牌 in 手牌列表:
            if 牌.牌.点数 == 输入牌型.头点数:
                出牌列表.append(牌)
                i+=1
                if 输入牌型.牌型 == 重复牌牌型[i-1]:
                    return 出牌列表
    return 出牌列表

static func 人机出牌(人机手牌列表:Array[Node],上家牌型:扑克牌类.牌型信息)->Array[Node]:
    var 上个牌型 =  上家牌型.牌型
    var 手牌列表 =  扑克牌类.类型转换(人机手牌列表)
    var 牌型列表:Array[扑克牌类.牌型信息]=获取牌型列表(手牌列表,上家牌型)
    牌型列表.sort_custom(扑克牌类.比较牌型大小)
    if 上个牌型 == 扑克牌类.牌型列表.无牌型:
        return 根据牌型出牌(人机手牌列表,扑克牌类.牌型信息.new(扑克牌类.牌型列表.单张,人机手牌列表[0].牌.点数))
    match 上个牌型:
        扑克牌类.牌型列表.单张:#刚好比牌型大的牌型
            for 牌型 in 牌型列表:
                if 扑克牌类.比较牌型大小(上家牌型,牌型):
                    return 根据牌型出牌(人机手牌列表,牌型)
        扑克牌类.牌型列表.对子:
            for 牌型 in 牌型列表:
                if 扑克牌类.比较牌型大小(上家牌型,牌型):
                    return 根据牌型出牌(人机手牌列表,牌型)
    return []


